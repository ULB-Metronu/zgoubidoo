# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: ci

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - master
      - develop
    types: [opened, synchronize, reopened]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest ]
        python: ['3.8', '3.9', '3.10']
    steps:
      - uses: webfactory/ssh-agent@v0.6.0
        with:
          ssh-private-key: ${{ secrets.ZGOUBI_KEY }}
      - name: Set up GCC
        uses: egor-tensin/setup-gcc@v1
        with:
          version: 11
          platform: x64
      - name: Install Zgoubi
        run: |
          git clone git@github.com:ULB-Metronu/zgoubi.git
          cd zgoubi
          git checkout develop
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B zgoubi/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}} -DCMAKE_Fortran_COMPILER=/usr/bin/gfortran-9 zgoubi
      - name: Make
        run: |
          cd zgoubi/build
          make
          make install
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: Set up python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python }}
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        run: poetry install --no-interaction --with dev
      #----------------------------------------------
      #              run test suite with Sonar
      #----------------------------------------------
      - name: Run tox
        run: |
          source .venv/bin/activate
          pytest
